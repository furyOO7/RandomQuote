{"version":3,"sources":["container/QuoteBox/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quoteText","author","color","colornum","getQuoteHandler","axios","get","params","method","format","jsonp","lang","then","response","status","data","i","colorArray","length","console","log","setState","quoteAuthor","catch","error","newQuoteHandler","postSocialMedia","alert","react_default","a","createElement","className","style","backgroundColor","id","onClick","Component","App","container_QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74c01add.chunk.js","sourcesContent":["import React, { Component } from 'react';\n //ontAwesome = require('react-fontawesome');\n//  import FontAwesome from 'react-fontawesome'\n//  import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n//  import { faCoffee } from '@fortawesome/free-solid-svg-icons'\n\n\n\n\nimport axios from \"axios\";\nimport './QuoteBox.css';\n\nclass QuoteBox extends Component{\n    constructor(props){\n        super(props)\n    this.colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n    }\n    state= {\n        \"quoteText\": \"Loading...\",\n        \"author\": \"Loading...\",\n        \"color\": \"\",\n        \"colornum\": 0\n    }\n    componentDidMount(){\n       this.getQuoteHandler();\n    }\n    getQuoteHandler = () => {\n        const param = {\n            \"method\": \"getQuote\",\n            \"format\": \"json\",\n            \"jsonp\": \"parseQuote\",\n            \"lang\": \"en\"\n\n        };\n\n        axios.get('http://api.forismatic.com/api/1.0/', {params: param}).then((response) => {\n            //console.log(response)\n            if(response.status === 200 && (typeof response.data == 'object')){\n               for(var i=0;i< this.colorArray.length;i++){\n                console.log(this.state.colornum, i)\n                   if( i === this.state.colornum || this.state.colornum === this.colorArray.length){\n                       if( this.state.colornum !== 50){\n                       this.setState({\n                           \"color\":  this.colorArray[i],\n                           \"colornum\": ++i,\n                            \"quoteText\": response.data.quoteText,\n                           \"author\": response.data.quoteAuthor\n                       })\n                       break;\n                   }else{\n                        this.setState({\n                            \"colornum\": 0\n                        })\n                       \n                   }\n               }\n            }\n        }\n            else{\n                this.setState({\n                    \"quoteText\": \"We are tired!!. Please hit the button again to get Quote.\",\n                    \"author\": \"Adarsh\"\n                })\n            }\n        })\n        .catch(function(error){\n            console.log(\"error\", error)\n        })\n    }\n    newQuoteHandler = ()=> {\n        this.getQuoteHandler();\n    }\n\n    postSocialMedia = () => {\n       alert(\"posting is under work\")\n    }\n\n    render(){\n        return (\n            <div className=\"main-container\" style={{\"backgroundColor\": this.state.color}}>\n            <div id=\"quote-box\">\n\n            <div id=\"text\">\n                <h2>{this.state.quoteText}</h2>\n                </div>\n                 <p id=\"author\"><strong><i>-- {this.state.author}</i></strong></p>\n        <div id=\"tweet-quote\">\n            <button className=\"new-quote1\" onClick={this.postSocialMedia}><i className=\"fa fa-twitter\"></i></button>\n            </div>\n            <div id=\"new-quote1\">\n            <button className=\"new-quote1\" onClick={this.postSocialMedia}><i className=\"fa fa-facebook\"></i></button>\n            </div>\n            <div id=\"new-quote\" onClick={this.newQuoteHandler}><button className=\"new-quote1 addclass\">New Quote</button></div>\n             </div>\n             </div>\n      \n        )\n    }\n\n}\n\nexport default QuoteBox;\n","import React, { Component } from 'react';\nimport QuoteBox from \"./container/QuoteBox/QuoteBox\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <QuoteBox />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}